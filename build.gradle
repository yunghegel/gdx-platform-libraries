buildscript {
    repositories {
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org" }
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}" // Added if serialization is needed globally
        classpath "com.github.johnrengelman:shadow:8.1.1"
    }
}

plugins {
    id 'java-platform'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}



group = 'dev.jamiecrown.gdx'
version = "${projectVersion}"

repositories {
    mavenCentral()
    google()
    flatDir {
        dirs 'libs'
    }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

javaPlatform {
    allowDependencies()

}


dependencies {
    constraints {
        api(project(":core"))
        api(project(":geometry"))
        api(project(":examples"))
        api(project(":gizmos"))
        api(project(":io"))
        api(project(":picking"))
        api(project(":scenegraph"))
        api(project(":test"))
        api(project(":state"))
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.javaPlatform
            artifactId = project.name

        }
    }
    repositories {
        maven {
            name =  "snapshots"
            url = uri("${snapshotsUrl}")
            credentials {
                username = "${snapshotsUsername}"
                password = "${snapshotsPassword}"
            }
        }
        maven {
            name = "releases"
            url = uri("${releasesUrl}")
            credentials {
                username = "${releasesUsername}"
                password = "${releasesPassword}"
            }
        }



    }
}



subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'kotlinx-serialization'

//    apply from: project.gradle.gradleUserHomeDir.path + "/project.gradle"

    group = rootProject.group
    version = rootProject.version



    repositories {
        mavenCentral()
        google()
        flatDir {
            dirs rootProject.file('libs')
        }
        mavenLocal()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org" }
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven {
            name "snapshots"
            url "https://repository.jamiecrown.dev/snapshots"
        }
        maven {
            name "releases"
            url "https://repository.jamiecrown.dev/releases"
        }
    }



    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        implementation fileTree(dir: rootProject.file('libs'), include: '*.jar')
        implementation platform('org.junit:junit-bom:5.8.2')
        implementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        implementation "org.jetbrains.kotlin:kotlin-test-junit5:${kotlinVersion}" // Using JUnit5 specific Kotlin test
        implementation 'org.jetbrains.kotlin:kotlin-reflect:2.2.20'
        implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
        implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        implementation("org.eclipse.lsp4j:org.eclipse.lsp4j:0.21.0") // Check for the latest version
        testImplementation("org.assertj:assertj-core:3.27.3")
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinxSerializationVersion"

        implementation "io.github.libktx:ktx-inject:$ktxVersion"
        implementation "io.github.libktx:ktx-collections:$ktxVersion"
        implementation "io.github.libktx:ktx-graphics:$ktxVersion"
        implementation "io.github.libktx:ktx-scene2d:$ktxVersion"
        implementation "io.github.libktx:ktx-app:$ktxVersion"
        implementation "io.github.libktx:ktx-assets:$ktxVersion"
        implementation "io.github.libktx:ktx-async:$ktxVersion"
        implementation "io.github.libktx:ktx-json:$ktxVersion"
        implementation "io.github.libktx:ktx-math:$ktxVersion"
        implementation "io.github.libktx:ktx-style:$ktxVersion"
        implementation "io.github.libktx:ktx-vis:$ktxVersion"
        implementation "io.github.libktx:ktx-actors:$ktxVersion"
        implementation "io.github.libktx:ktx-vis:$ktxVersion"
        implementation "io.github.libktx:ktx-ashley:$ktxVersion"
        implementation "io.github.libktx:ktx-assets-async:$ktxVersion"
        // SLF4J API
        implementation 'org.slf4j:slf4j-api:2.0.12' // Use the latest stable version
        implementation "com.github.mgsx-dev.gdx-gltf:gltf:$gltfVersion"

        // SLF4J binding (choose one)
        // For Logback:
        implementation 'ch.qos.logback:logback-classic:1.4.14' // Use the latest stable version


        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        if (project.name != "test") {
            testImplementation project(":test")
        }
        
    }

    java {
        sourceCompatibility = rootProject.ext.jvmVersion
        targetCompatibility = rootProject.ext.jvmVersion
        toolchain {
            languageVersion = JavaLanguageVersion.of(rootProject.ext.jvmVersion as int)
        }
    }

    kotlin {
        jvmToolchain(rootProject.ext.jvmVersion as int)
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = rootProject.ext.jvmVersion
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
            freeCompilerArgs += "-Xopt-in=kotlin.ExperimentalStdlibApi"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
            events "passed", "skipped", "failed"
        }
        jvmArgs = ['-Xmx2G', '-XstartOnFirstThread'] // Adjust memory settings as needed
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src']
            }
            kotlin {
                srcDirs = ['src']
            }
            resources {
                srcDirs = ['res']
            }
        }
        test {
            java {
                srcDirs = ['test']
            }
            resources {
                srcDirs = ['res']
            }
            kotlin {
                srcDirs = ['test']
            }
        }
    }

    shadowJar {
        archiveClassifier.set('fat')
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    artifacts {
        archives shadowJar
        archives sourcesJar
        archives javadocJar


    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifactId = project.name
            }
        }
        repositories {
            maven {
                name = "snapshots"
                url = uri(project.version.endsWith("-SNAPSHOT") ? rootProject.ext.snapshotsUrl : rootProject.ext.releasesUrl)
                credentials {
                    username = project.version.endsWith("-SNAPSHOT") ? rootProject.ext.snapshotsUsername : rootProject.ext.releasesUsername
                    password = project.version.endsWith("-SNAPSHOT") ? rootProject.ext.snapshotsPassword : rootProject.ext.releasesPassword
                }
            }
        }
    }
}

apply from: project.gradle.gradleUserHomeDir.path + "/project.gradle"

// Add these extensions to rootProject.ext
ext {
    kotlinxModulesArray = [""] as String[] // Kept for consistency if needed by other parts
    jvmVersion = "17" // Make jvmVersion available as an ext property
    snapshotsUrl = "https://repository.jamiecrown.dev/snapshots"
    releasesUrl = "https://repository.jamiecrown.dev/releases"
    snapshotsUsername = "user"
    releasesUsername = "user"
    snapshotsPassword = ""
    releasesPassword = ""
}

static void writeFile(String path, String content) {
    File file = new File(path)
    file.parentFile.mkdirs()
    file.text = content
}

task initBuild { task ->
    println "Initializing build..."
    def requiredProps = ['repositoryUrl', 'repositoryUsername', 'repositoryPassword']
    requiredProps.each { prop ->
        if (project.findProperty(prop) == null) {
            throw new GradleException("Property '${prop}' is not set. Please define it in gradle.properties or via command line.")
        }
    }
    println "All required properties are set."

    def os = org.gradle.internal.os.OperatingSystem.current()
    def time = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    println "Initializing build for $os at $time; $version on JDK ${System.getProperty('java.version')} (${System.getProperty('java.vendor')})"
}



